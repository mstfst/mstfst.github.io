{"version":3,"sources":["cardData.js","examples/BailReform.js","App.js","serviceWorker.js","index.js"],"names":["cards","start","text","leftText","leftCardID","rightText","rightCardID","police_arrive","end","BailReform","useState","currentCardID","setCurrentCardID","beingSwiped","setBeingSwiped","childRefs","useMemo","Array","Object","keys","length","fill","map","i","React","createRef","currentCardIndex","setCurrentCardIndex","swipe","dir","index","current","href","rel","className","cardID","ref","preventSwipe","key","onSwipe","onCardLeftScreen","direction","outOfFrame","style","backgroundColor","display","whiteSpace","onClick","justifyContent","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAIaA,EAAQ,CACnBC,MAAO,CACLC,KAAK,wLAKLC,SAAU,eACVC,WAAY,gBACZC,UAAW,QACXC,YAAa,iBAEfC,cAAe,CACbL,KAAK,qBACLC,SAAU,OACVC,WAAY,MACZC,UAAW,MACXC,YAAa,OAEfE,IAAK,CACHN,KAAK,gBACLC,SAAU,MACVC,WAAY,KACZC,UAAW,MACXC,YAAa,OCqEFG,MA7Ff,WAAuB,IAAD,EACsBC,mBAAS,SAD/B,mBACbC,EADa,KACEC,EADF,OAEsBF,qBAFtB,gCAGkBA,oBAAS,IAH3B,mBAGbG,EAHa,KAGAC,EAHA,KAIdC,EAAYC,mBAChB,kBACEC,MAAMC,OAAOC,KAAKnB,GAAOoB,QACtBC,KAAK,GACLC,KAAI,SAACC,GAAD,OAAOC,IAAMC,iBACtB,IATkB,EAW4Bf,mBAC9CK,EAAUK,OAAS,GAZD,mBAWbM,EAXa,KAWKC,EAXL,KAgCdC,EAAQ,SAACC,EAAKC,GAClBf,EAAUe,GAAOC,QAAQH,MAAMC,IAKjC,OACE,6BACE,0BACEG,KAAK,8DACLC,IAAI,eAEN,0BACED,KAAK,8DACLC,IAAI,eAEN,yBAAKC,UAAU,iBACZhB,OAAOC,KAAKnB,GAAOsB,KAAI,SAACa,EAAQL,GAAT,OACtB,kBAAC,IAAD,CACEM,IAAKrB,EAAUe,GACfO,aAAc,CAAC,KAAM,QACrBH,UAAU,QACVI,IAAKH,EACLI,QAAS,SAACV,GAvCbhB,GAEHC,GAAe,IAsCT0B,iBAAkB,SAACX,GAAD,OAlCT,SAACY,EAAWX,GAC7BH,EAAoBG,EAAQ,GACV,SAAdW,EACF7B,EAAiBZ,EAAMW,GAAeP,YACf,UAAdqC,GACT7B,EAAiBZ,EAAMW,GAAeL,aAExCQ,GAAe,GA2BoB4B,CAAWb,EAAKC,KAE3C,yBACEa,MAAO,CACLC,gBAAiB,OACjBC,QAASf,IAAUJ,EAAmB,QAAU,QAElDQ,UAAU,QAEV,wBAAIS,MAAO,CAAEG,WAAY,aACtBnC,EAAgBX,EAAMW,GAAeT,KAAO,YAMtDS,EACC,yBAAKuB,UAAU,WACb,4BAAQa,QAAS,kBAAMnB,EAAM,OAAQF,KAClC1B,EAAMW,GAAeR,UAExB,4BAAQ4C,QAAS,kBAAMnB,EAAM,QAASF,KACnC1B,EAAMW,GAAeN,YAG1B,yBAAK6B,UAAU,wBACb,oEACA,yBAAKA,UAAU,UAAUS,MAAO,CAAEK,eAAgB,WAChD,4BAAQD,QAAS,WACfE,OAAOC,SAASC,WADlB,iBCvEGC,MAVf,WAGE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCAcmB,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.59c0dfca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//end cards have null for both left/right\r\n//start card has ID 'start'\r\nexport const cards = {\r\n  start: {\r\n    text: `You and your friend are out at night when you notice a store that is closed, but the front door is open.  \r\n    \r\n    Your friend goes in to check it out.\r\n    \r\n    What do you do?`,\r\n    leftText: 'Wait outside',\r\n    leftCardID: 'police_arrive',\r\n    rightText: 'Go in',\r\n    rightCardID: 'police_arrive'\r\n  },\r\n  police_arrive: {\r\n    text: `The police arrive.`,\r\n    leftText: 'Wait',\r\n    leftCardID: 'end',\r\n    rightText: 'Run',\r\n    rightCardID: 'end'\r\n  },\r\n  end: {\r\n    text: `The last card`,\r\n    leftText: 'end',\r\n    leftCardID: null,\r\n    rightText: 'end',\r\n    rightCardID: null\r\n  }\r\n};\r\n","import React, { useState, useMemo} from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport { cards } from \"../cardData\";\r\n\r\nfunction BailReform() {\r\n  const [currentCardID, setCurrentCardID] = useState(\"start\");\r\n  const [lastDirection, setLastDirection] = useState()\r\n  const [beingSwiped, setBeingSwiped] = useState(false);\r\n  const childRefs = useMemo(\r\n    () =>\r\n      Array(Object.keys(cards).length)\r\n        .fill(0)\r\n        .map((i) => React.createRef()),\r\n    []\r\n  );\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(\r\n    childRefs.length - 1\r\n  );\r\n\r\n  const swiped = (direction) => {\r\n    if (!beingSwiped) {\r\n      // setLastDirection(direction);\r\n      setBeingSwiped(true);\r\n    }\r\n  };\r\n\r\n  const outOfFrame = (direction, index) => {\r\n    setCurrentCardIndex(index - 1);\r\n    if (direction === \"left\") {\r\n      setCurrentCardID(cards[currentCardID].leftCardID);\r\n    } else if (direction === \"right\") {\r\n      setCurrentCardID(cards[currentCardID].rightCardID);\r\n    }\r\n    setBeingSwiped(false);\r\n  };\r\n\r\n  const swipe = (dir, index) => {\r\n    childRefs[index].current.swipe(dir); // Swipe the card!\r\n    // \r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <link\r\n        href=\"https://fonts.googleapis.com/css?family=Damion&display=swap\"\r\n        rel=\"stylesheet\"\r\n      />\r\n      <link\r\n        href=\"https://fonts.googleapis.com/css?family=Alatsi&display=swap\"\r\n        rel=\"stylesheet\"\r\n      />\r\n      <div className=\"cardContainer\">\r\n        {Object.keys(cards).map((cardID, index) => (\r\n          <TinderCard\r\n            ref={childRefs[index]}\r\n            preventSwipe={[\"up\", \"down\"]}\r\n            className=\"swipe\"\r\n            key={cardID}\r\n            onSwipe={(dir) => swiped(dir, index)}\r\n            onCardLeftScreen={(dir) => outOfFrame(dir, index)}\r\n          >\r\n            <div\r\n              style={{\r\n                backgroundColor: \"grey\",\r\n                display: index === currentCardIndex ? \"block\" : \"none\",\r\n              }}\r\n              className=\"card\"\r\n            >\r\n              <h3 style={{ whiteSpace: \"pre-line\" }}>\r\n                {currentCardID ? cards[currentCardID].text : null}\r\n              </h3>\r\n            </div>\r\n          </TinderCard>\r\n        ))}\r\n      </div>\r\n      {currentCardID ? \r\n        <div className=\"buttons\">\r\n          <button onClick={() => swipe(\"left\", currentCardIndex)}>\r\n            {cards[currentCardID].leftText}\r\n          </button>\r\n          <button onClick={() => swipe(\"right\", currentCardIndex)}>\r\n            {cards[currentCardID].rightText}\r\n          </button>\r\n        </div> : \r\n        <div className=\"treatedFairlySection\"> \r\n          <p>Do you think you were treated fairly?</p>\r\n          <div className=\"buttons\" style={{ justifyContent: 'center' }}>\r\n            <button onClick={() => {\r\n              window.location.reload()\r\n            }}>Try again</button>\r\n          </div>\r\n        </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BailReform;\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\n// import Switch from 'react-ios-switch'\r\n// import Advanced from './examples/Advanced'\r\n// import Simple from './examples/Simple'\r\nimport BailReform from './examples/BailReform';\r\n\r\nfunction App () {\r\n  // const [showAdvanced, setShowAdvanced] = useState(true)\r\n\r\n  return (\r\n    <div className='app'>\r\n      <BailReform />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}