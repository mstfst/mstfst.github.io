{"version":3,"sources":["cardData.js","BailReform.js","App.js","serviceWorker.js","index.js"],"names":["cards","start","text","leftText","leftCardID","rightText","rightCardID","police_arrive_wait","police_arrive_go_in","police_arrest_comply","police_arrest_run","BailReform","useState","currentCardID","setCurrentCardID","beingSwiped","setBeingSwiped","childRefs","useMemo","refs","Object","keys","map","key","index","swipe","dir","cardID","current","href","rel","className","ref","preventSwipe","onSwipe","onCardLeftScreen","direction","outOfFrame","style","backgroundColor","display","whiteSpace","onClick","justifyContent","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAEaA,EAAQ,CACnBC,MAAO,CACLC,KAAK,wOAOLC,SAAU,eACVC,WAAY,qBACZC,UAAW,QACXC,YAAa,uBAEfC,mBAAoB,CAClBL,KAAK,qOAOLC,SAAU,oBACVC,WAAY,uBACZC,UAAW,MACXC,YAAa,qBAEfE,oBAAqB,CACnBN,KAAK,+KAKLC,SAAU,oBACVC,WAAY,uBACZC,UAAW,MACXC,YAAa,qBAEfG,qBAAsB,CACpBP,KAAK,qQAKLC,SAAU,yBACVC,WAAY,KACZC,UAAW,KACXC,YAAa,MAEfI,kBAAmB,CACjBR,KAAK,sMAKLC,SAAU,yBACVC,WAAY,KACZC,UAAY,KACZC,YAAa,OC2DFK,MAnHf,WAAuB,IAAD,EACsBC,mBAAS,SAD/B,mBACbC,EADa,KACEC,EADF,OAEsBF,qBAFtB,gCAGkBA,oBAAS,IAH3B,mBAGbG,EAHa,KAGAC,EAHA,KAWdC,EAAYC,mBAChB,WACE,IAAIC,EAAO,GAIX,OAHAC,OAAOC,KAAKrB,GAAOsB,KAAI,SAACC,EAAKC,GAC3BL,EAAKI,GAAO,MAEPJ,IACN,IA2BCM,EAAQ,SAACC,EAAKC,GAEbZ,IACHC,GAAe,GACfC,EAAUU,GAAQC,QAAQH,MAAMC,KAKpC,OACE,6BACE,0BACEG,KAAK,8DACLC,IAAI,eAEN,0BACED,KAAK,8DACLC,IAAI,eAEN,yBAAKC,UAAU,iBACZlB,EACCO,OAAOC,KAAKrB,GAAOsB,KAAI,SAACK,EAAQH,GAAT,OACvB,kBAAC,IAAD,CACEQ,IAAKf,EAAUU,GACfM,aAAc,CAAC,KAAM,QACrBF,UAAU,QACVR,IAAKI,EACLO,QAAS,SAACR,GA9CbX,GAGHC,GAAe,IA4CTmB,iBAAkB,SAACT,GAAD,OAxCT,SAACU,EAAWT,GAIX,SAAdS,EACFtB,EAAiBd,EAAM2B,GAAQvB,YACR,UAAdgC,GACTtB,EAAiBd,EAAM2B,GAAQrB,aAEjCU,GAAe,GA+BoBqB,CAAWX,EAAKC,KAE3C,yBACEW,MAAO,CACLC,gBAAiB,OACjBC,QAAS3B,IAAkBc,EAAS,QAAU,QAEhDI,UAAU,QAEV,wBAAIO,MAAO,CAAEG,WAAY,aACtBzC,EAAM2B,GAAQzB,WAIlB,MAENW,EACC,yBAAKkB,UAAU,WACZ/B,EAAMa,GAAeV,SACpB,4BAAQuC,QAAS,kBAAMjB,EAAM,OAAQZ,KACpCb,EAAMa,GAAeV,UACZ,KACXH,EAAMa,GAAeR,UACpB,4BAAQqC,QAAS,kBAAMjB,EAAM,QAASZ,KACrCb,EAAMa,GAAeR,WACZ,MAEd,yBAAK0B,UAAU,wBACb,oEACA,yBAAKA,UAAU,UAAUO,MAAO,CAAEK,eAAgB,WAChD,4BAAQD,QAAS,WACfE,OAAOC,SAASC,WADlB,cAIF,6BACE,uBAAGjB,KAAK,uDAAR,4BClGGkB,MAVf,WAGE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,QCGciB,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c0a4acd5.chunk.js","sourcesContent":["//end cards have null for both left/right\r\n//start card has ID 'start'\r\nexport const cards = {\r\n  start: {\r\n    text: `You and your friend are out at night when you notice a store that is closed.\r\n\r\n    It seems that someone has broken into the store -- the front door is open.\r\n   \r\n   Your friend goes in to check it out.\r\n   \r\n   What do you do?`,\r\n    leftText: 'Wait outside',\r\n    leftCardID: 'police_arrive_wait',\r\n    rightText: 'Go in',\r\n    rightCardID: 'police_arrive_go_in'\r\n  },\r\n  police_arrive_wait: {\r\n    text: `The police arrive.\r\n\r\n    One officer goes in to arrest your friend for break and enter.\r\n    \r\n    The other officer suspects you of being a \"lookout\" for your friend.\r\n    \r\n    You are asked to freeze and put your hands up.`,\r\n    leftText: 'Put your hands up',\r\n    leftCardID: 'police_arrest_comply',\r\n    rightText: 'Run',\r\n    rightCardID: 'police_arrest_run'\r\n  },\r\n  police_arrive_go_in: {\r\n    text: `The police arrive.\r\n\r\n    They enter the store and find you and your friend inside.\r\n    \r\n    One officer holds you at gunpoint and tells you freeze and put your hands up.`,\r\n    leftText: 'Put your hands up',\r\n    leftCardID: 'police_arrest_comply',\r\n    rightText: 'Run',\r\n    rightCardID: 'police_arrest_run'\r\n  },\r\n  police_arrest_comply: {\r\n    text: `The police officer arrests you for break and enter.\r\n\r\n    The officer has the choice to let you live in your community until your criminal charges are resolved, or take you into police custody.\r\n    \r\n    The officer chooses to take you into police custody.`,\r\n    leftText: 'Go into police custody',\r\n    leftCardID: null,\r\n    rightText: null,\r\n    rightCardID: null\r\n  },\r\n  police_arrest_run: {\r\n    text: `The police officer chases after you, catches up to you, and violently takes you down.\r\n\r\n    You are arrested for break and enter and evading arrest.\r\n    \r\n    You are taken into police custody.`,\r\n    leftText: 'Go into police custody',\r\n    leftCardID: null,\r\n    rightText:  null,\r\n    rightCardID: null\r\n  }\r\n};\r\n","import React, { useState, useMemo} from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport { cards } from \"./cardData\";\r\n\r\nfunction BailReform() {\r\n  const [currentCardID, setCurrentCardID] = useState(\"start\");\r\n  const [lastDirection, setLastDirection] = useState()\r\n  const [beingSwiped, setBeingSwiped] = useState(false);\r\n  // const childRefs = useMemo(\r\n  //   () =>\r\n  //     Array(Object.keys(cards).length)\r\n  //       .fill(0)\r\n  //       .map((i) => React.createRef()),\r\n  //   []\r\n  // );\r\n  const childRefs = useMemo(\r\n    () => {\r\n      let refs = {};\r\n      Object.keys(cards).map((key, index) => {\r\n        refs[key] = {};\r\n      })\r\n      return refs;\r\n    }, []\r\n  );\r\n  // const [currentCardIndex, setCurrentCardIndex] = useState(\r\n  //   childRefs.length - 1\r\n  // );\r\n\r\n  const swiped = (direction) => {\r\n    // console.log('inswped', direction)\r\n    if (!beingSwiped) {\r\n      // console.log('was swiped')\r\n      // setLastDirection(direction);\r\n      setBeingSwiped(true);\r\n    }\r\n  };\r\n\r\n  const outOfFrame = (direction, cardID) => {\r\n    // console.log('out of frame ', direction, cardID)\r\n\r\n    // setCurrentCardIndex(index - 1);\r\n    if (direction === \"left\") {\r\n      setCurrentCardID(cards[cardID].leftCardID);\r\n    } else if (direction === \"right\") {\r\n      setCurrentCardID(cards[cardID].rightCardID);\r\n    }\r\n    setBeingSwiped(false);\r\n  };\r\n\r\n  const swipe = (dir, cardID) => {\r\n    // console.log('swiped ', dir, cardID)\r\n    if (!beingSwiped) {\r\n      setBeingSwiped(true)\r\n      childRefs[cardID].current.swipe(dir); // Swipe the card!\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <link\r\n        href=\"https://fonts.googleapis.com/css?family=Damion&display=swap\"\r\n        rel=\"stylesheet\"\r\n      />\r\n      <link\r\n        href=\"https://fonts.googleapis.com/css?family=Alatsi&display=swap\"\r\n        rel=\"stylesheet\"\r\n      />\r\n      <div className=\"cardContainer\">\r\n        {currentCardID ? \r\n          Object.keys(cards).map((cardID, index) => (\r\n          <TinderCard\r\n            ref={childRefs[cardID]}\r\n            preventSwipe={[\"up\", \"down\"]}\r\n            className=\"swipe\"\r\n            key={cardID}\r\n            onSwipe={(dir) => swiped(dir, cardID)}\r\n            onCardLeftScreen={(dir) => outOfFrame(dir, cardID)}\r\n          >\r\n            <div\r\n              style={{\r\n                backgroundColor: \"grey\",\r\n                display: currentCardID === cardID ? \"block\" : \"none\",\r\n              }}\r\n              className=\"card\"\r\n            >\r\n              <h3 style={{ whiteSpace: \"pre-line\" }}>\r\n                {cards[cardID].text}\r\n              </h3>\r\n            </div>\r\n          </TinderCard>\r\n        )) : null}\r\n      </div>\r\n      {currentCardID ? \r\n        <div className=\"buttons\">\r\n          {cards[currentCardID].leftText ? \r\n            <button onClick={() => swipe(\"left\", currentCardID)}>\r\n            {cards[currentCardID].leftText}\r\n          </button> : null}\r\n          {cards[currentCardID].rightText ? \r\n            <button onClick={() => swipe(\"right\", currentCardID)}>\r\n            {cards[currentCardID].rightText}\r\n          </button> : null}\r\n        </div> : \r\n        <div className=\"treatedFairlySection\"> \r\n          <p>Do you think you were treated fairly?</p>\r\n          <div className=\"buttons\" style={{ justifyContent: 'center' }}>\r\n            <button onClick={() => {\r\n              window.location.reload()\r\n            }}>Try again</button>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/mstfst/react-tinder-card-example\">See the GitHub repo.</a>\r\n            </div>\r\n        </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BailReform;\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport BailReform from './BailReform';\r\n\r\nfunction App () {\r\n  // const [showAdvanced, setShowAdvanced] = useState(true)\r\n\r\n  return (\r\n    <div className='app'>\r\n      <BailReform />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}